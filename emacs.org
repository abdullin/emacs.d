#+PROPERTY:    tangle build/init-main.el
#+PROPERTY:    eval no-export
#+PROPERTY:    results silent
#+PROPERTY:    header-args:sh  :tangle no

* Introduction

This is a literate version of my base emacs config. You can generate
emacs init script out of it by running =org-babel-tangle=.

The script assumes that this folder is either checked out to
=~/.emacs.d= or linked to it.


#+BEGIN_SRC elisp :tangle init.el
  (load-file "~/.emacs.d/build/init-main.el")
  (server-start)
#+END_SRC

* General settings
** Roles

This config could be used from multiple servers. We will
enable/disable roles as needed. 

#+BEGIN_SRC elisp
  (setq ra/roles '(
                   ;; "ess"
                   ;; "erlang"
                   ;; "go"
                   ;; "web" - HTML,CSS,JS,JSX etc
                   ))
#+END_SRC

Local configs could define overrides.

** Home directory

Let's define our own constant for the emacs directory and a function
to get subdir:

#+BEGIN_SRC elisp
  (defconst ra/emacs-directory (concat (getenv "HOME") "/.emacs.d/"))
  (defun ra/emacs-subdirectory (d) (expand-file-name d ra/emacs-directory))
#+END_SRC


I don't recall why I still have this setting, but let it be:

#+BEGIN_SRC elisp
(setq emacs-root-dir user-emacs-directory)
#+END_SRC

** Load system-specific overrides

We might have some local custom stuff around (e.g. brew location of
erlang), so let's look up that in machine-specific file:

#+BEGIN_SRC elisp
  (setq ra/emacs-machine-init
        (expand-file-name (concat system-name ".el") ra/emacs-directory)
        )

  ;; (setq custom-file (expand-file-name "init-local.el" ra/emacs-directory))
  (when (file-exists-p ra/emacs-machine-init)
    (load ra/emacs-machine-init))
#+END_SRC


*** Rinat's rMBR

#+BEGIN_SRC elisp :tangle Rinats-MacBook-Pro.local.el
  ;; enable all modes
  (setq ra/roles '(
                   "org"
                   "ess"
                   "erlang"
                   ;; "go"
                   "web" ;;HTML,CSS,JS,JSX etc
                   ))

  ;; config for erlang on OSX 
  (setq ra/erlang-root-path "/usr/local/Cellar/erlang/18.0.3/")
  (setq ra/erlang-tools-path "/usr/local/Cellar/erlang/18.0.3/lib/erlang/lib/tools-2.8/emacs/")
  ;;config for R on OSX
  (setq inferior-R-program-name "/usr/local/Cellar/r/3.2.2_1/bin/R")

#+END_SRC

** Setup load paths

I  have two  load  paths, =lisp=  for  v1 logic  and  =build= for  the
literate version (or v2):

#+BEGIN_SRC elisp
(add-to-list 'load-path (ra/emacs-subdirectory "lisp"))
(add-to-list 'load-path (ra/emacs-subdirectory "build"))
#+END_SRC

* Helper functions
Just a few helper functions to lighten up the day
#+BEGIN_SRC elisp

(defun add-hook-list (callback hooks)
  "Adds callback to each one of the hooks."
  (mapc (lambda (hook)
	  (add-hook hook callback))
	hooks))
#+END_SRC

* Packages
** Install Package manager

Let's install el-get, if it isn't installed:

#+BEGIN_SRC elisp 
  (add-to-list 'load-path (expand-file-name "el-get/el-get" emacs-root-dir))

  (unless (require 'el-get nil 'noerror)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
      (let (el-get-master-branch)
        (goto-char (point-max))
        (eval-print-last-sexp))))

#+END_SRC
** Load recipes from small files

We can also have dependencies spread across tiny files (legacy stuff)
and load them like this:

#+BEGIN_SRC elisp
;; load all .el files inside `modules-dir`
(setq modules-dir (expand-file-name "packages" emacs-root-dir))
(mapc 'load (directory-files modules-dir 't "^[^#].*el$"))
#+END_SRC
** Describe dependencies explicitly
We can describe our common dependencies like this:

#+BEGIN_SRC elisp 
  ;; modern list library
  (el-get-bundle dash)
  (el-get-bundle dired-plus)
  (el-get-bundle flycheck)
  (el-get-bundle yasnippet)
  (el-get-bundle company)
  ;; Swap buffers without typing C-x b on each window
  (el-get-bundle buffer-move)  
  (el-get-bundle hydra)
  (el-get-bundle web-mode)
  ;; undo tree git-style
  (el-get-bundle undo-tree) 
#+END_SRC
** Common requires
#+BEGIN_SRC elisp
  (require 'dash)
#+END_SRC

** Key-chords 

Key-chord lets you define keystrokes (e.g. =zz=) which, if pressed in
rapid sequence, will trigger some effect. It has a side-effect: if a
key is present in a key-chord, it will work slower. So we'll try to
keep these to a bare minimum.

Let's enable key-chord:

#+BEGIN_SRC elisp
  (el-get-bundle key-chord)
  (require 'key-chord)
  (key-chord-mode 1)
#+END_SRC

* Display settings
** Hide some things
#+BEGIN_SRC elisp
;; I know what the scratch is for
(setq initial-scratch-message "")

;; don't show the startup help screen
(setq inhibit-startup-screen t)

;; disable alarm bell beep
(setq visible-bell t)
#+END_SRC

** Windows
*** Wind move

[[http://emacswiki.org/emacs/WindMove][WindMove]] (in GnuEmacs v21+) lets you move point from window to window
using Shift and the arrow keys. I wire it to use Super+VIM keys (CMD
on OSX). This way moves are consistent with Super+Arrow keys I use for
the primary window manager.

#+BEGIN_SRC elisp
  ;; move to a neighbor window using SUPER + VIM KEY
  (require 'windmove)
  (global-set-key (kbd "s-k") 'windmove-up)
  (global-set-key (kbd "s-j") 'windmove-down)
  (global-set-key (kbd "s-h") 'windmove-left)
  (global-set-key (kbd "s-l") 'windmove-right)
#+END_SRC

*** Buf move

Let's bind similar keys (but with =Shift=) to move windows around:

#+BEGIN_SRC elisp
  (global-set-key (kbd "s-S-H") 'buf-move-left)
  (global-set-key (kbd "s-S-J") 'buf-move-down)
  (global-set-key (kbd "s-S-K") 'buf-move-up)
  (global-set-key (kbd "s-S-L") 'buf-move-right)
#+END_SRC

*** Winner mode

[[http://emacswiki.org/emacs/WinnerMode][Winner mode]] allows you to “undo” (and “redo”) changes in the window
configuration with =C-c left= and =C-c right=.

#+BEGIN_SRC elisp
  (winner-mode 1)
#+END_SRC

*** Hydra

Hydra-based way of manipulating windows. Let's define a few helpers
(taken from hydra samples):

#+BEGIN_SRC elisp
  (defun hydra-move-splitter-left (arg)
    "Move window splitter left."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (shrink-window-horizontally arg)
      (enlarge-window-horizontally arg)))

  (defun hydra-move-splitter-right (arg)
    "Move window splitter right."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (enlarge-window-horizontally arg)
      (shrink-window-horizontally arg)))

  (defun hydra-move-splitter-up (arg)
    "Move window splitter up."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (enlarge-window arg)
      (shrink-window arg)))

  (defun hydra-move-splitter-down (arg)
    "Move window splitter down."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (shrink-window arg)
      (enlarge-window arg)))
#+END_SRC

Ok, let's define a hydra head for moving windows around on =F2=:

#+BEGIN_SRC elisp
  (defhydra ra/hydra-windows (global-map "<f2>")
    "winops"
    ("SPC" nil)
    ("<left>"  hydra-move-splitter-left)
    ("<down>" hydra-move-splitter-down) 
    ("<up>" hydra-move-splitter-up)
    ("<right>" hydra-move-splitter-right)
    ("x" delete-window :color blue)
    ("X" delete-other-windows :color blue)
    ("z" (progn
          (winner-undo)
          (setq this-command 'winner-undo))
     )
    ("Z" winner-redo)
    ("r" split-window-right :color blue)
    ("b" split-window-below :color blue)
    )
#+END_SRC

** Mode line

[[https://github.com/Malabarba/smart-mode-line][Smart mode line]] improves a lot normal emacs mode line by adding:

- colors;
- directory prefixing (e.g. convert =~/.emacs.d/= to =:ED:=;
- smart truncation to work well on small displays.

Line format was taken from [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sasha Chua]].


#+BEGIN_SRC elisp
  ;; get smart-mode-line
  (el-get-bundle smart-mode-line)
  ;; respect the current theme
  (setq sml/theme 'respectful)
  ;; don't ask for confirmation
  (setq sml/no-confirm-load-theme t)
  ;; taken from Sasha Chua
  (setq-default
     mode-line-format
     '("%e"
       mode-line-front-space
       mode-line-mule-info
       mode-line-client
       mode-line-modified
       mode-line-remote
       mode-line-frame-identification
       mode-line-buffer-identification
       "  "
       mode-line-position
       (vc-mode vc-mode)
       "  "
       mode-line-modes
       mode-line-misc-info
       mode-line-end-spaces))

  (sml/setup)
#+END_SRC

If I ever needed to hide some minor modes, this could be done via
[[https://github.com/Malabarba/rich-minority][rich-minority]] package.

Oh, while we are at it, let's display battery percentage:

#+BEGIN_SRC elisp
  (display-battery-mode)
#+END_SRC

** Cursor

Make the cursor blink:

#+BEGIN_SRC elisp
;; blinking cursor
(blink-cursor-mode t)
#+END_SRC
* GUI Client

Emacs can have a nice GUI window that lets you have fine-grained
control over fonts and sizes. Let's put that stuff into a separate
config file and load when we have us a window system.

   #+BEGIN_SRC elisp
     (require 'init-client)
   #+END_SRC

Header for the client-specific file would say:

#+BEGIN_SRC elisp :tangle build/init-client.el
(provide 'init-client)
#+END_SRC

** Fonts

I like Monaco on OSX:

#+BEGIN_SRC elisp :tangle build/init-client.el
  (when (eq system-type 'darwin)

    ;; set default font for the frames as well (daemon + ec)
    (setq default-frame-alist '((font . "MonacoB-16")))
    (set-fontset-font t 'cyrillic "Droid Sans Mono")
    )
#+END_SRC

** Color theme

I like to use solarized theme by default:

#+BEGIN_SRC elisp :tangle build/init-client.el
  (el-get-bundle solarized-theme)
  (load-theme 'solarized-light t)
#+END_SRC

It would be nice to switch to solarized dark, if needed. Let's add
hydra for that:

#+BEGIN_SRC elisp :tangle build/init-client.el
  (defhydra hydra-themes (global-map "<f9>")
    "themes"
    ("SPC" nil)
    ("q"
     (lambda ()
       (interactive)
       (load-theme 'solarized-light t)
       )
     )
    ("w"
     (lambda ()
       (interactive)
       (load-theme 'solarized-dark t)
       )
     )
    )
#+END_SRC


** Zooming with Hydra 

With this simple code, hit =F9= to enter zooming mode:

#+BEGIN_SRC elisp :tangle build/init-client.el
  (defhydra hydra-zoom (global-map "<f9>")
    "zoom"
    ("+" text-scale-increase "in")
    ("=" text-scale-increase "in")
    ("-" text-scale-decrease "out"))
#+END_SRC

** Remove clutter

Some things just waste space, let's kill them once and for all frames
(this works even for emacs in daemon mode and emacsclient).

#+BEGIN_SRC elisp
  (add-to-list 'default-frame-alist '(vertical-scroll-bars . nil))
  (add-to-list 'default-frame-alist '(left-fringe . 0))
  (add-to-list 'default-frame-alist '(right-fringe . 0))
  (add-to-list 'default-frame-alist '(menu-bar-lines . 0))
  (add-to-list 'default-frame-alist '(tool-bar-lines . 0))
#+END_SRC

* Editing experience
** Dired

Dired can work like a total commander and guess targets when two
windows are open:
#+BEGIN_SRC elisp
(setq dired-dwim-target t)
#+END_SRC
** Markdown
Load the package with el-get:

#+BEGIN_SRC elisp 
(el-get-bundle markdown-mode)
#+END_SRC

And bind it do the files:
#+BEGIN_SRC elisp
  (add-to-list 'auto-mode-alist
               '("\\.\\(md\\|mdown\\|markdown\\)\\'" . markdown-mode)
               )
#+END_SRC
** Unfill paragraph

Unfilling a paragraph joins all the lines in a paragraph into a single
line. It is the contrary of FillParagraph.

#+BEGIN_SRC elisp
  ;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph    
  (defun ra/unfill-paragraph (&optional region)
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) '(t)))
    (let ((fill-column (point-max)))
      (fill-paragraph nil region)))
#+END_SRC

And let's bind it to a keystroke:

#+BEGIN_SRC elisp
  (define-key global-map "\M-Q" 'ra/unfill-paragraph)
#+END_SRC

** Expand Region 

[[https://github.com/magnars/expand-region.el][Expand region]] increases the selected region by semantic units. Just
keep pressing the key until it selects what you want.

#+BEGIN_SRC elisp
  ;; smart region expansion
  (el-get-bundle expand-region)
  (global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

** VIM emulation

Evil emulates vim inside emacs. It works pretty well out of the box:

#+BEGIN_SRC elisp

;; VIM emulation
(el-get-bundle evil)
(require 'evil)
(evil-mode 1)

#+END_SRC

Escape is too far, but we can use =jk= to enter the normal mode:

#+BEGIN_SRC elisp
  (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
  (key-chord-define evil-visual-state-map "jj" 'evil-normal-state)
  (key-chord-define evil-normal-state-map "jj" 'evil-normal-state)
#+END_SRC

Something that I can't get used to is to disable cursor keys:

#+BEGIN_SRC elisp :tangle no

;;Motion state map disables the cursor keys in normal, operator, visual
;; as well as the special motion states.
(define-key evil-insert-state-map [left] 'undefined)
(define-key evil-insert-state-map [right] 'undefined)
(define-key evil-insert-state-map [up] 'undefined)
(define-key evil-insert-state-map [down] 'undefined)

(define-key evil-motion-state-map [left] 'undefined)
(define-key evil-motion-state-map [right] 'undefined)
(define-key evil-motion-state-map [up] 'undefined)
(define-key evil-motion-state-map [down] 'undefined)

#+END_SRC

** Parentheses

Highlight matching parens:
#+BEGIN_SRC elisp
(show-paren-mode t)
#+END_SRC

** IDO (Interactively DO stuff)


I love IDO:
#+BEGIN_SRC elisp

  (add-hook 'ido-setup-hook (lambda ()
                  (setq ido-enable-flex-matching t)))


  ; Use IDO for both buffer and file completion and ido-everywhere to t
  (setq ido-everywhere t)
  (setq ido-max-directory-size 100000)
  (ido-mode (quote both))
  ; Use the current window when visiting files and buffers with ido
  (setq ido-default-file-method 'selected-window)
  (setq ido-default-buffer-method 'selected-window)


  (ido-mode t)
#+END_SRC

** Auto-load changes

When file wasn't modified, reload changes automatically:

#+BEGIN_SRC elisp
(global-auto-revert-mode t)
#+END_SRC

** UTF8 Encoding

C'mon, it is 21st century already. Set environment coding system to UTF8:

#+BEGIN_SRC elisp
(set-language-environment "UTF-8")
#+END_SRC

** Yasnippet

Yasnipped lets you define snippets of code for different languages:

#+BEGIN_SRC elisp
(require 'yasnippet)
(yas-global-mode)
#+END_SRC


Inside the snippets directory should be directories for each mode,
e.g. clojure-mode and org-mode. This connects the mode with the
snippets.

#+BEGIN_SRC elisp
(setq yas-snippet-dirs (ra/emacs-subdirectory "snippets"))
#+END_SRC

** Jump Hydra

#+BEGIN_SRC elisp
  (defun ra/kill-this-buffer-if-not-modified ()
    (interactive)
    (if (menu-bar-non-minibuffer-window-p)
        (kill-buffer-if-not-modified (current-buffer))
      (abort-recursive-edit)))

  (defhydra hydra-jump (:color blue)
    "jumps"
    ("d" dired-jump "dired")
    ("." ido-find-file "file")
    ("l" ido-switch-buffer "buffer")
    ("k" ra/kill-this-buffer-if-not-modified "kill")
    ("z" undo-tree-visualize "undo")
    (";" execute-extended-command "meta-x")
    ("w" ra/hydra-windows/body "win")
    )
#+END_SRC

We will call this helper via a key-chord:

#+BEGIN_SRC elisp
  (key-chord-define-global ";'" 'hydra-jump/body)
#+END_SRC
** Key chords
* Org-mode

This is my emacs setup for the mighty org-mode!

#+BEGIN_SRC elisp
  ;; latest version of org-mode
  (el-get-bundle org-mode)
  (require 'org)
#+END_SRC

** Settings
*** View preferences

Make org-mode look pretty
#+BEGIN_SRC elisp
  (setq org-startup-indented t)
  (setq org-hide-leading-stars t)
  (setq org-odd-level-only t)
  (setq org-indent-mode t)
#+END_SRC

I want to see inline images:

#+BEGIN_SRC elisp
  (setq org-startup-with-inline-images t)
#+END_SRC

*** File aliases

Default for org, txt and archive files
#+BEGIN_SRC elisp
  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))
#+END_SRC

*** Locations

My default org folder is:

#+BEGIN_SRC elisp
  (setq org-directory "~/org")
#+END_SRC

But I want to compose agenda from all org files in projects as well:

#+BEGIN_SRC elisp
  (defun ra/remove-lock-files (fs)
    "Removes file names matching .# pattern (emacs lock files"
    (-remove(lambda (x) (string-match "\.#" x)) fs)
    )

  (defun ra/list-possible-org-files ()
    "Provides a list of all matching org files"
    (ra/remove-lock-files
     (append
      (file-expand-wildcards "~/org/*.org")
      ;;(file-expand-wildcards "~/proj/*/*.org")
      ;;(file-expand-wildcards "~/proj/*/org/*.org")
      )
     )
    )

  (setq org-agenda-files (ra/list-possible-org-files))
#+END_SRC

*** Use IDO

Use IDO for both buffer and file completion and ido-everywhere to t
#+BEGIN_SRC elisp
(setq org-completion-use-ido t)
#+END_SRC

*** Navigation

Switch between org buffers:

#+BEGIN_SRC elisp
(global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

*** Clocking shortcuts


#+BEGIN_SRC elisp
  (defhydra hydra-org-clock (:color blue :hint nil)
    "
  Clock   In/out^     ^Edit^   ^Summary     (_?_)
  -----------------------------------------
          _i_n         _e_dit   _g_oto entry
          _c_ontinue   _q_uit   _d_isplay
          _o_ut        ^ ^      _r_eport
        "
    ("i" org-clock-in)
    ("o" org-clock-out)
    ("c" org-clock-in-last)
    ("e" org-clock-modify-effort-estimate)
    ("q" org-clock-cancel)
    ("g" org-clock-goto)
    ("d" org-clock-display)
    ("r" org-clock-report)
    ("?" (org-info "Clocking commands")))

  (define-key org-mode-map  (kbd "C-c w") 'hydra-org-clock/body)
#+END_SRC

*** Links and IDs

Use org ids to create perma-links (as taken from [[http://stackoverflow.com/questions/27132422/reference-unique-id-across-emacs-org-mode-files][SO]]):

#+BEGIN_SRC elisp
  ;; wire up
  (require 'org-id)
  ;; Create if storing link interactively and no CUSTOM_ID is present
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
#+END_SRC

Bind shortcut to store a link at the current location:


#+BEGIN_SRC elisp
  (define-key org-mode-map  (kbd "C-c l") 'org-store-link)
#+END_SRC
** GTD Workflow
*** Keywords and states

A list of keywords and their colors, initially taken from [[http://doc.norang.ca/org-mode.html][Bernt Hansen]]:

#+BEGIN_SRC elisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

  ;;; color keywords
  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold))))

#+END_SRC

*** State Transitions


There are two ways to change task state:
#+BEGIN_SRC elisp
  ;; Changing a task state is done with =C-C C-t KEY=:
  (setq org-use-fast-todo-selection t)
  ;; changing states with S + arrow does not trigger full change
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+END_SRC

Triggered state changes


#+BEGIN_SRC elisp
  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("HOLD" ("WAITING") ("HOLD" . t))
                (done ("WAITING") ("HOLD"))
                ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

#+END_SRC

*** Capture mode

Let's use C-c c to start capture mode:

#+BEGIN_SRC elisp

(setq org-default-notes-file "~/org/inbox.org")
(global-set-key (kbd "C-c c") 'org-capture)

#+END_SRC

And define some capture templates:

#+BEGIN_SRC elisp
  (setq org-capture-templates
        (quote (("t" "todo" entry (file "~/org/inbox.org")
                 "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                ("r" "respond" entry (file "~/org/inbox.org")
                 "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
                ("n" "note" entry (file "~/org/inbox.org")
                 "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
                ("j" "Journal" entry (file+datetree "~/org/journal.org")
                 "* %?\n%U\n" :clock-in t :clock-resume t)
                ("w" "org-protocol" entry (file "~/org/inbox.org")
                 "* TODO Review %c\n%U\n" :immediate-finish t)
                ("m" "Meeting" entry (file "~/org/inbox.org")
                 "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                ("p" "Phone call" entry (file "~/org/inbox.org")
                 "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
                ("h" "Habit" entry (file "~/org/inbox.org")
                 "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d/3d>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
#+END_SRC

*** Agenda

#+BEGIN_SRC elisp



  (global-set-key (kbd "<f12>") 'org-agenda)
#+END_SRC

*** Refile

Refile allows us to move org entries between org files. Disabled for
now.

#+BEGIN_SRC elisp :tangle no

; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))

; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)

; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))
; Use the current window for indirect buffer display
(setq org-indirect-buffer-display 'current-window)

;;;; Refile settings
; Exclude DONE state tasks from refile targets
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)
#+END_SRC
** Literate Programming
*** Babel
Some initial languages that we want babel to support:


#+BEGIN_SRC elisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (sh . t)
     (python . t)
     (R . t)
     (ruby . t)
     (ditaa . t)
     (dot . t)
     (octave . t)
     (sqlite . t)
     (perl . t)
     (gnuplot . t)
     ))
#+END_SRC

Let's be risky and evaluate all blocks without asking:

#+BEGIN_SRC elisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC
*** Editing source code

I don't want org src to open code editing in another window. Current
is just fine.

#+BEGIN_SRC elisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

*** Refresh inline images

I want inline images to be refreshed automatically (taken from [[http://emacs.stackexchange.com/a/9813][SS]]):

#+BEGIN_SRC elisp
  (defun ra/fix-inline-images ()
    (when org-inline-image-overlays
      (org-redisplay-inline-images)))
  (add-hook 'org-babel-after-execute-hook 'ra/fix-inline-images)
#+END_SRC

*** Org publishing

#+BEGIN_SRC elisp
  (setq org-export-backends (quote (
         ascii
         ;;beamer
         html
         ;;latex
         md
         ;;odt
         ;;s5
         ;;taskjuggler
  )))
#+END_SRC
* Miscellaneous
** Unknown origins

This was copied from somewhere, not sure if I still need these:

#+BEGIN_SRC elisp
;; mode line settings
(column-number-mode t)
(line-number-mode t)
(size-indication-mode t)

;; set your desired tab width
(setq-default indicate-empty-lines t)
#+END_SRC

Another unknown bit:

#+BEGIN_SRC elisp :tangle no

;; S-up does not work properly in terminals
;; http://lists.gnu.org/archive/html/help-gnu-emacs/2011-05/msg00211.html
 (if (equal "xterm" (tty-type))
      (define-key input-decode-map "\e[1;2A" [S-up]))

(defadvice terminal-init-xterm (after select-shift-up activate)
  (define-key input-decode-map "\e[1;2A" [S-up]))

#+END_SRC

and one more:

#+BEGIN_SRC elisp :tangle no

  ;; This won't affect the size of the emacs window, but the term process will always think the window is 80 columns wide
  (defun term-window-width () 80)
  ;;  turn on line truncation
  (add-hook 'term-mode-hook
        (lambda () (setq truncate-lines t)))
#+END_SRC

** Tabs vs Spaces

Let's stick with tabs for now:


#+BEGIN_SRC elisp

;; display tab chars as 4
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)

#+END_SRC

** Enable Y/N answers

=y= is shorter than =yes=:
#+BEGIN_SRC elisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Disable auto-save

Auto-save never really worked for me:
#+BEGIN_SRC elisp
(setq make-backup-files nil)
(setq auto-save-default nil)

#+END_SRC

** Disable escape

Escape key hurts my pinky :)

#+BEGIN_SRC elisp
  (global-set-key (kbd "<escape>")      'nil)
#+END_SRC
** Line numbers 

This is a very nice way to highlight jumps for vim.

#+BEGIN_SRC elisp 
  (el-get-bundle linum-relative
    (setq linum-relative-current-symbol "")
    )
#+END_SRC

#+BEGIN_SRC elisp

(global-linum-mode 1)

(defconst linum-mode-excludes '(
                                doc-view-mode
                                compilation-mode
                                term-mode
                                dired-mode
                                ibuffer-mode
                                eshell-mode
                                )
  "List of major modes preventing linum to be enabled in the buffer.")

(defadvice linum-mode (around linum-mode-selective activate)
  "Avoids enabling of linum-mode in the buffer having major mode set to one
of listed in `linum-mode-excludes'."
  (unless (member major-mode linum-mode-excludes)
    ad-do-it))

#+END_SRC

And highlight current line:
#+BEGIN_SRC elisp

;; highlight current line
(add-hook 'after-change-major-mode-hook 'hl-line-mode)

#+END_SRC

** Inherit shell environment

Process environment of emacs might benefit from inheriting shell
environment variables (e.g. for running external tools):

#+BEGIN_SRC elisp
(defun ra/load-unix-shell-env ()
  "Adds the shell environment variables to Emacs' process environment."
  (interactive)
  (let* ((env (shell-command-to-string "$SHELL -i -c 'printenv'"))
	 (entries (split-string env "\n" t)))
    (mapc (lambda (entry)
	    (add-to-list 'process-environment entry))
	  entries)))

(ra/load-unix-shell-env)
#+END_SRC

* Languages
** Erlang

Default erlang distribution has great setup for emacs. We just need to
wire it together, provided there was an erlang installation.

On OSX you could install erlang via:

#+BEGIN_SRC sh :tangle no
brew install erlang
#+END_SRC

And then define in machine-local file something like:

#+BEGIN_SRC elisp :tangle no
(setq ra/erlang-path "/usr/local/Cellar/erlang/17.5/")
#+END_SRC

Erlang-specific config is:

#+BEGIN_SRC elisp :tangle build/init-erlang.el
  (when
      (boundp 'ra/erlang-root-path)
  
    (setq erlang-root-dir (concat ra/erlang-root-path "/lib/erlang/lib"))
    (setq erlang-bin-path (concat ra/erlang-root-path "/lib/erlang/bin"))
    (setq erlang-emacs-path ra/erlang-tools-path)

    (setq load-path (cons erlang-emacs-path load-path))
    (setq exec-path (cons erlang-bin-path exec-path))
    (require 'erlang-start)
   
    )

  (provide 'init-erlang)

#+END_SRC

We can load it from the main file:

#+BEGIN_SRC elisp
  (when (member "erlang" ra/roles)
    (require 'init-erlang)
    )

#+END_SRC

** Pure Javascript

#+BEGIN_SRC elisp :tangle build/init-js.el
  (require `company)
  (require `flycheck)
  (require `yasnippet)
  (require `jsfmt)
  ;;(add-hook `js-mode-hook `flycheck-mode)
  ;;(add-hook `js-mode-hook `company-mode)

  (add-hook 'before-save-hook 'jsfmt-before-save)
  (add-hook 'js-mode-hook
            (lambda ()
              ;; activate on-the-fly-check (will use installed linter)
  ;;            (flycheck-mode)
              ;; auto-completion
              (company-mode)
              ;; Activate the folding mode
  ;;            (hs-minor-mode t)
              ;; snippets
              (yas-minor-mode)

          
              ;; perform flycheck on save
              (setq flycheck-check-syntax-automatically '(save))
              ;; run flycheck here
              (flycheck-mode)

              )
            )


  (setq js-indent-level 4)

  (provide 'init-js)
#+END_SRC

Load this config, if we are in web role:

#+BEGIN_SRC elisp
  (when (member "web" ra/roles)
    (require 'init-js)
    )
#+END_SRC

** Golang mode

Grab golang packages:

#+BEGIN_SRC elisp :tangle build/init-go.el
(el-get-bundle go-mode)
(el-get-bundle gocode)
(el-get-bundle go-eldoc)
#+END_SRC

As it was imported from my previous config:

#+BEGIN_SRC elisp :tangle build/init-go.el
  (require 'go-mode)
  (require 'key-chord)
  (require 'company-go)
  (require 'go-eldoc)
  (require 'yasnippet)

  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save)


   ;; jump to file
  (key-chord-define go-mode-map "5t" 'godef-jump)
  (key-chord-define go-mode-map "4t" 'godef-jump-other-window)


  (defun my-go-mode-hook ()
    ;; customize compile command
    ;; (if (not (string-match "go" compile-command))
    ;;     (set (make-local-variable 'compile-command)
    ;;          "go vet && go test"))

    ;; go uses tabs
    (setq indent-tabs-mode t)
    (setq tab-width 4)
    (yas-minor-mode)

    (set (make-local-variable 'company-backends) '(company-go))        
    (company-mode) 
    (go-eldoc-setup)

    (local-set-key (kbd "M-.") 'godef-jump)
    )                              

  (add-hook 'go-mode-hook 'my-go-mode-hook)

  (provide 'init-go)

#+END_SRC

And load from the main file:

#+BEGIN_SRC elisp
  (when (member "go" ra/roles)
    (require 'init-go)
    )

#+END_SRC

** Lisp

Grab the packages and wire them into lisp mode:

#+BEGIN_SRC elisp

  (setq lisp-mode-hooks '(emacs-lisp-mode-hook
              lisp-mode-hook
              lisp-interaction-mode-hook
              scheme-mode-hook
              clojure-mode-hook))

  (el-get-bundle paredit
    (add-hook-list 'paredit-mode lisp-mode-hooks)
    )
  (el-get-bundle rainbow-delimiters
    (add-hook-list 'rainbow-delimiters-mode lisp-mode-hooks)
    )
#+END_SRC

** Web editing

Web mode that is also used to edit mixed files like JSX

#+BEGIN_SRC elisp :tangle build/init-web.el
  (require 'web-mode)
  (require 'yasnippet)
  (require 'company)

  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))

  ;; activate JSX mode
  (add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))

  (defun my-web-mode-hook ()
    "Hooks for Web mode."
    (setq web-mode-markup-indent-offset 4)
    (setq web-mode-code-indent-offset 4)
    ; YAS has to be loaded before company
    (yas-minor-mode 1)
    (setq indent-tabs-mode t)
    (company-mode)


    (add-hook 'before-save-hook 'whitespace-cleanup)
  )
  (add-hook 'web-mode-hook  'my-web-mode-hook)


  ;; auto-completion sources


   (setq web-mode-ac-sources-alist
         '(
           ("html" . (ac-source-yasnippet))
           ))

  (add-hook 'web-mode-before-auto-complete-hooks
            '(lambda ()
               (let ((web-mode-cur-language
                      (web-mode-language-at-pos)))
                 (if (string= web-mode-cur-language "html")
                     (yas-activate-extra-mode 'html-mode)
                   (yas-deactivate-extra-mode 'html-mode))
                 )))





  (defadvice web-mode-highlight-part (around tweak-jsx activate)
    (if (equal web-mode-content-type "jsx")
        (let ((web-mode-enable-part-face nil))
          ad-do-it)
      ad-do-it))

  ;; JSX syntax checking

  (flycheck-define-checker jsxhint-checker
    "A JSX syntax and style checker based on JSXHint."
  ;; We need to use source-inplace because eslint looks for
              ;; configuration files in the directory of the file being checked.
              ;; See https://github.com/flycheck/flycheck/issues/447
    :command ("eslint" "--format=checkstyle" source-inplace)
     :error-parser flycheck-parse-checkstyle
    :error-filter (lambda (errors)
                    (mapc (lambda (err)
                            ;; Parse error ID from the error message
                            (setf (flycheck-error-message err)
                                  (replace-regexp-in-string
                                   (rx " ("
                                       (group (one-or-more (not (any ")"))))
                                       ")" string-end)
                                   (lambda (s)
                                     (setf (flycheck-error-id err)
                                           (match-string 1 s))
                                     "")
                                   (flycheck-error-message err))))
                          (flycheck-sanitize-errors errors))
                    errors)
    :modes (web-mode)
    )


  (add-hook 'web-mode-hook
            (lambda ()
              (when (equal web-mode-content-type "jsx")
                ;; enable flycheck
                (flycheck-select-checker 'jsxhint-checker)
                (flycheck-mode)
                ;;
                (add-hook 'web-mode-hook #'(lambda () (yas-activate-extra-mode 'jsx-mode)))



                )))


  (provide 'init-web)
#+END_SRC

and we can load it from the main file:

#+BEGIN_SRC elisp
  (when (member "web" ra/roles)
    (require 'init-web)
    )
#+END_SRC

** Statistics


Let's install R and gnuplot

#+BEGIN_SRC elisp
  (when (member "ess" ra/roles)
    (el-get-bundle ess)
    (el-get-bundle gnuplot-mode)
    (add-to-list 'auto-mode-alist '("\\.R$" . R-mode))
    )
#+END_SRC
* Footnotes
** Loading the configuration

To reload with a require:


#+BEGIN_SRC elisp
(provide 'init-main)

#+END_SRC
